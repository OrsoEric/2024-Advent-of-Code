


The adv instruction (opcode 0) performs division. The numerator is the value in the A register. The denominator is found by raising 2 to the power of the instruction's combo operand. (So, an operand of 2 would divide A by 4 (2^2); an operand of 5 would divide A by 2^B.) The result of the division operation is truncated to an integer and then written to the A register.

The bxl instruction (opcode 1) calculates the bitwise XOR of register B and the instruction's literal operand, then stores the result in register B.

The bst instruction (opcode 2) calculates the value of its combo operand modulo 8 (thereby keeping only its lowest 3 bits), then writes that value to the B register.

The jnz instruction (opcode 3) does nothing if the A register is 0. However, if the A register is not zero, it jumps by setting the instruction pointer to the value of its literal operand; if this instruction jumps, the instruction pointer is not increased by 2 after this instruction.

The bxc instruction (opcode 4) calculates the bitwise XOR of register B and register C, then stores the result in register B. (For legacy reasons, this instruction reads an operand but ignores it.)

The out instruction (opcode 5) calculates the value of its combo operand modulo 8, then outputs that value. (If a program outputs multiple values, they are separated by commas.)

The bdv instruction (opcode 6) works exactly like the adv instruction except that the result is stored in the B register. (The numerator is still read from the A register.)

The cdv instruction (opcode 7) works exactly like the adv instruction except that the result is stored in the C register. (The numerator is still read from the A register.)

Combo operands 0 through 3 represent literal values 0 through 3.
Combo operand 4 represents the value of register A.
Combo operand 5 represents the value of register B.
Combo operand 6 represents the value of register C.
Combo operand 7 is reserved and will not appear in valid programs.

ARG     VALUE
0   ->  0
1   ->  1
2   ->  2
3   ->  3
4   ->  A
5   ->  B
6   ->  C
7   ->  ERROR

instructions
0 {arg} - A-DIV
    A = floor( A / 2^{arg} )
1 {arg} - B-XOR 
    B = B xor {arg}
2 {arg} - B-MOD
    B = {arg} % 8
3 {arg} - JUMP CONDITIONAL
    if A == 0
        NOP
    else:
        JUMP {arg}
4 {arg} - XOR
    B = B xor C
    ignores {arg}
5 {arg} - PRINT
    PRINT {arg} % 8
6 {arg} - B-DIV
    B = floor( A / 2^{arg} )
7 {arg} - C-DIV
    C = floor( A / 2^{arg} )

__________________________________________________

look at the program since it's short

2,4
1,2
7,5
4,7
1,3
5,5
0,3 A=A/3
3,0 JUMP to address 0 if A!=0

there is a loop so I have to do this properly. it was an option to do it by hand


__________________________________________________

RUNNING 

[2024-12-17 17:53:59,696] INFO day17:120 > A-DIV | A 0 = A 2 / 8 
[2024-12-17 17:53:59,696] DEBUG day17:92 > STATE: PC: 14 | REG A: 0 | REG B: 1 | REG C: 2 | OUTPUT [2, 7, 4, 7, 2, 1, 7, 5, 1] 
[2024-12-17 17:53:59,696] DEBUG day17:93 > Instruction 3 | Argument Code 0 | Argument 0 
[2024-12-17 17:53:59,696] DEBUG day17:202 > HALT 
[2024-12-17 17:53:59,696] INFO day17:221 > OUTPUT: 274721751 
__________________________________________________


Register A: 729
Register B: 0
Register C: 0

Program: 0,1,5,4,3,0
Your first task is to determine what the program is trying to output. To do this, initialize the registers to the given values, then run the given program, collecting any output produced by out instructions. (Always join the values produced by out instructions with commas.) After the above program halts, its final output will be 4,6,3,5,6,3,5,2,1,0.

RESULT
[2024-12-17 17:52:09,861] DEBUG day17:92 > STATE: PC: 4 | REG A: 0 | REG B: 0 | REG C: 0 | OUTPUT [4, 6, 3, 5, 6, 3, 5, 2, 1, 0] 
[2024-12-17 17:52:09,861] DEBUG day17:93 > Instruction 3 | Argument Code 0 | Argument 0 
[2024-12-17 17:52:09,861] DEBUG day17:202 > HALT 
[2024-12-17 17:52:09,862] INFO day17:221 > OUTPUT: 4635635210 

I need to give the comas?

[2024-12-17 19:35:40,756] DEBUG day17:92 > STATE: PC: 14 | REG A: 0 | REG B: 1 | REG C: 2 | OUTPUT [2, 7, 4, 7, 2, 1, 7, 5, 1] 
[2024-12-17 19:35:40,756] DEBUG day17:93 > Instruction 3 | Argument Code 0 | Argument 0 
[2024-12-17 19:35:40,756] DEBUG day17:202 > HALT 
[2024-12-17 19:35:40,756] INFO day17:221 > OUTPUT: 2,7,4,7,2,1,7,5,1 


_____________________________________________________________________________________

PART 2

Find a value of register A that makes output equal to input

[2024-12-17 19:46:24,034] INFO day17:233 > Begin 
[2024-12-17 19:46:24,034] INFO day17:133 > B-MOD | B 6 = 35200350 MOD 8 
[2024-12-17 19:46:24,034] INFO day17:127 > B-XOR | B 4 = B 6 ^ 2 
[2024-12-17 19:46:24,034] INFO day17:171 > C-DIV | C 2200021 = A 35200350 / 16 
[2024-12-17 19:46:24,034] ERROR day17:60 > ERROR: invalid argument code 7 
[2024-12-17 19:46:24,034] INFO day17:151 > B-XOR | B 2200017 = B 4 ^ C 2200021 
[2024-12-17 19:46:24,034] INFO day17:127 > B-XOR | B 2200018 = B 2200017 ^ 3 
[2024-12-17 19:46:24,034] INFO day17:156 > PRINT 2 
[2024-12-17 19:46:24,034] INFO day17:117 > A-DIV | A 4400043 = A 35200350 / 8 
[2024-12-17 19:46:24,034] INFO day17:142 > JUMP | 0 

B = A mod 8
B = B xor 2
C = A div 16
B = B xor C
B = B xor 3
PRINT B mod 8
A = A div 8

all instructions seem useless 
the program is actually
PRINT A mod 8
A = A div 8
JUMP

No, PRINT B mod 8, not A mod 8

Just try to scan?


[2024-12-17 20:08:14,402] INFO day17:238 > 2 
[2024-12-17 20:08:14,402] INFO day17:238 > 0 
[2024-12-17 20:08:14,402] INFO day17:238 > 3 
[2024-12-17 20:08:14,402] INFO day17:238 > 7 
[2024-12-17 20:08:14,402] INFO day17:238 > 1 
[2024-12-17 20:08:14,402] INFO day17:238 > 0 
[2024-12-17 20:08:14,402] INFO day17:238 > 7 
[2024-12-17 20:08:14,402] INFO day17:238 > 0 
[2024-12-17 20:08:14,402] INFO day17:238 > 3 

[2024-12-17 20:15:41,771] INFO day17:278 > Begin 
[2024-12-17 20:15:41,772] INFO day17:132 > B-MOD | B 6 = 35200350 MOD 8 
[2024-12-17 20:15:41,772] INFO day17:126 > B-XOR | B 4 = B 6 ^ 2 
[2024-12-17 20:15:41,772] INFO day17:170 > C-DIV | C 2200021 = A 35200350 / 16 
[2024-12-17 20:15:41,772] ERROR day17:59 > ERROR: invalid argument code 7 
[2024-12-17 20:15:41,772] INFO day17:150 > B-XOR | B 2200017 = B 4 ^ C 2200021 
[2024-12-17 20:15:41,772] INFO day17:126 > B-XOR | B 2200018 = B 2200017 ^ 3 
[2024-12-17 20:15:41,772] INFO day17:155 > PRINT 2 | 2200018 % 8 
[2024-12-17 20:15:41,772] INFO day17:116 > A-DIV | A 4400043 = A 35200350 / 8 
[2024-12-17 20:15:41,772] INFO day17:141 > JUMP | 0 
[2024-12-17 20:15:41,772] INFO day17:132 > B-MOD | B 3 = 4400043 MOD 8 
[2024-12-17 20:15:41,772] INFO day17:126 > B-XOR | B 1 = B 3 ^ 2 
[2024-12-17 20:15:41,772] INFO day17:170 > C-DIV | C 2200021 = A 4400043 / 2 
[2024-12-17 20:15:41,772] ERROR day17:59 > ERROR: invalid argument code 7 
[2024-12-17 20:15:41,772] INFO day17:150 > B-XOR | B 2200020 = B 1 ^ C 2200021 
[2024-12-17 20:15:41,772] INFO day17:126 > B-XOR | B 2200023 = B 2200020 ^ 3 
[2024-12-17 20:15:41,772] INFO day17:155 > PRINT 7 | 2200023 % 8 
[2024-12-17 20:15:41,772] INFO day17:116 > A-DIV | A 550005 = A 4400043 / 8 
[2024-12-17 20:15:41,772] INFO day17:141 > JUMP | 0 
[2024-12-17 20:15:41,772] INFO day17:132 > B-MOD | B 5 = 550005 MOD 8 
[2024-12-17 20:15:41,772] INFO day17:126 > B-XOR | B 7 = B 5 ^ 2 
[2024-12-17 20:15:41,772] INFO day17:170 > C-DIV | C 4296 = A 550005 / 128 
[2024-12-17 20:15:41,772] ERROR day17:59 > ERROR: invalid argument code 7 
[2024-12-17 20:15:41,772] INFO day17:150 > B-XOR | B 4303 = B 7 ^ C 4296 
[2024-12-17 20:15:41,772] INFO day17:126 > B-XOR | B 4300 = B 4303 ^ 3 
[2024-12-17 20:15:41,772] INFO day17:155 > PRINT 4 | 4300 % 8 
[2024-12-17 20:15:41,772] INFO day17:116 > A-DIV | A 68750 = A 550005 / 8 
[2024-12-17 20:15:41,772] INFO day17:141 > JUMP | 0 
[2024-12-17 20:15:41,772] INFO day17:132 > B-MOD | B 6 = 68750 MOD 8 
[2024-12-17 20:15:41,772] INFO day17:126 > B-XOR | B 4 = B 6 ^ 2 
[2024-12-17 20:15:41,772] INFO day17:170 > C-DIV | C 4296 = A 68750 / 16 
[2024-12-17 20:15:41,772] ERROR day17:59 > ERROR: invalid argument code 7 
[2024-12-17 20:15:41,772] INFO day17:150 > B-XOR | B 4300 = B 4 ^ C 4296 
[2024-12-17 20:15:41,772] INFO day17:126 > B-XOR | B 4303 = B 4300 ^ 3 
[2024-12-17 20:15:41,772] INFO day17:155 > PRINT 7 | 4303 % 8 
[2024-12-17 20:15:41,772] INFO day17:116 > A-DIV | A 8593 = A 68750 / 8 
[2024-12-17 20:15:41,772] INFO day17:141 > JUMP | 0 
[2024-12-17 20:15:41,772] INFO day17:132 > B-MOD | B 1 = 8593 MOD 8 
[2024-12-17 20:15:41,772] INFO day17:126 > B-XOR | B 3 = B 1 ^ 2 
[2024-12-17 20:15:41,772] INFO day17:170 > C-DIV | C 1074 = A 8593 / 8 
[2024-12-17 20:15:41,772] ERROR day17:59 > ERROR: invalid argument code 7 
[2024-12-17 20:15:41,772] INFO day17:150 > B-XOR | B 1073 = B 3 ^ C 1074 
[2024-12-17 20:15:41,772] INFO day17:126 > B-XOR | B 1074 = B 1073 ^ 3 
[2024-12-17 20:15:41,772] INFO day17:155 > PRINT 2 | 1074 % 8 
[2024-12-17 20:15:41,772] INFO day17:116 > A-DIV | A 1074 = A 8593 / 8 
[2024-12-17 20:15:41,772] INFO day17:141 > JUMP | 0 
[2024-12-17 20:15:41,772] INFO day17:132 > B-MOD | B 2 = 1074 MOD 8 
[2024-12-17 20:15:41,772] INFO day17:126 > B-XOR | B 0 = B 2 ^ 2 
[2024-12-17 20:15:41,772] INFO day17:170 > C-DIV | C 1074 = A 1074 / 1 
[2024-12-17 20:15:41,772] ERROR day17:59 > ERROR: invalid argument code 7 
[2024-12-17 20:15:41,772] INFO day17:150 > B-XOR | B 1074 = B 0 ^ C 1074 
[2024-12-17 20:15:41,772] INFO day17:126 > B-XOR | B 1073 = B 1074 ^ 3 
[2024-12-17 20:15:41,772] INFO day17:155 > PRINT 1 | 1073 % 8 
[2024-12-17 20:15:41,772] INFO day17:116 > A-DIV | A 134 = A 1074 / 8 
[2024-12-17 20:15:41,772] INFO day17:141 > JUMP | 0 
[2024-12-17 20:15:41,773] INFO day17:132 > B-MOD | B 6 = 134 MOD 8 
[2024-12-17 20:15:41,773] INFO day17:126 > B-XOR | B 4 = B 6 ^ 2 
[2024-12-17 20:15:41,773] INFO day17:170 > C-DIV | C 8 = A 134 / 16 
[2024-12-17 20:15:41,773] ERROR day17:59 > ERROR: invalid argument code 7 
[2024-12-17 20:15:41,773] INFO day17:150 > B-XOR | B 12 = B 4 ^ C 8 
[2024-12-17 20:15:41,773] INFO day17:126 > B-XOR | B 15 = B 12 ^ 3 
[2024-12-17 20:15:41,773] INFO day17:155 > PRINT 7 | 15 % 8 
[2024-12-17 20:15:41,773] INFO day17:116 > A-DIV | A 16 = A 134 / 8 
[2024-12-17 20:15:41,773] INFO day17:141 > JUMP | 0 
[2024-12-17 20:15:41,773] INFO day17:132 > B-MOD | B 0 = 16 MOD 8 
[2024-12-17 20:15:41,773] INFO day17:126 > B-XOR | B 2 = B 0 ^ 2 
[2024-12-17 20:15:41,773] INFO day17:170 > C-DIV | C 4 = A 16 / 4 
[2024-12-17 20:15:41,773] ERROR day17:59 > ERROR: invalid argument code 7 
[2024-12-17 20:15:41,773] INFO day17:150 > B-XOR | B 6 = B 2 ^ C 4 
[2024-12-17 20:15:41,773] INFO day17:126 > B-XOR | B 5 = B 6 ^ 3 
[2024-12-17 20:15:41,773] INFO day17:155 > PRINT 5 | 5 % 8 
[2024-12-17 20:15:41,773] INFO day17:116 > A-DIV | A 2 = A 16 / 8 
[2024-12-17 20:15:41,773] INFO day17:141 > JUMP | 0 
[2024-12-17 20:15:41,773] INFO day17:132 > B-MOD | B 2 = 2 MOD 8 
[2024-12-17 20:15:41,773] INFO day17:126 > B-XOR | B 0 = B 2 ^ 2 
[2024-12-17 20:15:41,773] INFO day17:170 > C-DIV | C 2 = A 2 / 1 
[2024-12-17 20:15:41,773] ERROR day17:59 > ERROR: invalid argument code 7 
[2024-12-17 20:15:41,773] INFO day17:150 > B-XOR | B 2 = B 0 ^ C 2 
[2024-12-17 20:15:41,773] INFO day17:126 > B-XOR | B 1 = B 2 ^ 3 
[2024-12-17 20:15:41,773] INFO day17:155 > PRINT 1 | 1 % 8 
[2024-12-17 20:15:41,773] INFO day17:116 > A-DIV | A 0 = A 2 / 8 
[2024-12-17 20:15:41,773] INFO day17:258 > OUTPUT: 2,7,4,7,2,1,7,5,1 



[2024-12-17 20:14:47,037] INFO day17:278 > Begin 
[2024-12-17 20:14:47,037] INFO day17:245 > a: 35200350 | b 0 | c 0 
[2024-12-17 20:14:47,037] INFO day17:247 > 2 
[2024-12-17 20:14:47,037] INFO day17:245 > a: 4400043 | b 2200018 | c 2200021 
[2024-12-17 20:14:47,037] INFO day17:247 > 0 
[2024-12-17 20:14:47,037] INFO day17:245 > a: 550005 | b 275000 | c 275002 
[2024-12-17 20:14:47,037] INFO day17:247 > 3 
[2024-12-17 20:14:47,037] INFO day17:245 > a: 68750 | b 34371 | c 34375 
[2024-12-17 20:14:47,037] INFO day17:247 > 7 
[2024-12-17 20:14:47,037] INFO day17:245 > a: 8593 | b 4303 | c 4296 
[2024-12-17 20:14:47,037] INFO day17:247 > 1 
[2024-12-17 20:14:47,037] INFO day17:245 > a: 1074 | b 537 | c 537 
[2024-12-17 20:14:47,037] INFO day17:247 > 0 
[2024-12-17 20:14:47,037] INFO day17:245 > a: 134 | b 64 | c 67 
[2024-12-17 20:14:47,037] INFO day17:247 > 7 
[2024-12-17 20:14:47,037] INFO day17:245 > a: 16 | b 15 | c 8 
[2024-12-17 20:14:47,037] INFO day17:247 > 0 
[2024-12-17 20:14:47,037] INFO day17:245 > a: 2 | b 0 | c 1 
[2024-12-17 20:14:47,037] INFO day17:247 > 3 

[2, 7, 4, 7, 2, 1, 7, 5, 1]